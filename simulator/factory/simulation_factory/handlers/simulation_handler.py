import pathlib

from lxml.etree import Element, SubElement, tostring

from simulator.factory.simulation_factory.parameters import (
    AcquisitionProfile,
    CompartmentModels,
    DefaultProfile,
    ArtifactModel,
)
from .simulation_infos import SimulationInfos


class SimulationHandler:
    """
    Class that encapsulate and contains all the elements of a simulation
    configuration. Serves to serialize all the components to a xml file.
    """

    def __init__(self, resolution, spacing, compartments=None):
        """
        Parameters
        ----------
        resolution : list(int)
            resolution of the output image
        spacing : list(float)
            spacing (in mm) of the output image
        compartments : list(dict), optional
            list of compartments to simulate
            (must be generated by the SimulationFactory)
        """
        self._acq_profile = AcquisitionProfile(resolution, spacing)
        self._art_model = ArtifactModel()
        self._grad_profile = None
        self._compartments = compartments if compartments else []

    def set_compartments(self, compartments):
        self._compartments = compartments
        return self

    def set_acquisition_profile(self, acquisition_profile):
        self._acq_profile.set_echo(
            acquisition_profile.get_echo()
        ).set_repetition(acquisition_profile.get_repetition()).set_n_coils(
            acquisition_profile.get_n_coils()
        ).set_dwell(
            acquisition_profile.get_dwell()
        ).set_partial_fourier(
            acquisition_profile.get_partial_fourier()
        ).set_scale(
            acquisition_profile.get_scale()
        ).set_reverse_phase(
            acquisition_profile.get_reverse_phase()
        ).set_inhomogen_time(
            acquisition_profile.get_inhomogen_time()
        ).set_axon_radius(
            acquisition_profile.get_axon_radius()
        )
        return self

    def set_gradient_profile(self, gradient_profile):
        self._grad_profile = gradient_profile
        return self

    def set_artifact_model(self, artifact_model):
        self._art_model = artifact_model
        return self

    def add_compartment(self, compartment):
        self._compartments.append(compartment)
        return self

    def generate_xml_configuration_file(
            self, output_naming: str, simulation_path: pathlib.Path = pathlib.Path()
    ):
        simulation_path.mkdir(parents=True, exist_ok=True)
        simulation_path = simulation_path.resolve(strict=True)

        data = Element("fiberfox")
        image_element = SubElement(data, "image")
        image_element = self._acq_profile.dump_to_xml(image_element)
        image_element = self._grad_profile.dump_to_xml(image_element)
        image_element = self._art_model.dump_to_xml(image_element)
        data = DefaultProfile().dump_to_xml(data)

        CompartmentModels(self._compartments).dump_to_xml(image_element)

        xml_string = tostring(data, pretty_print=True).decode("utf-8")

        with open(
                simulation_path / (output_naming + ".ffp"), "w+"
        ) as f:
            f.write(xml_string)

        return SimulationInfos(
            simulation_path,
            output_naming + ".ffp",
            [cmp["ID"] for cmp in self._compartments],
        )
